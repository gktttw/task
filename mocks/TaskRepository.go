// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	model "task/app/model"

	mock "github.com/stretchr/testify/mock"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: name, status
func (_m *TaskRepository) CreateTask(name string, status int) (model.Task, error) {
	ret := _m.Called(name, status)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (model.Task, error)); ok {
		return rf(name, status)
	}
	if rf, ok := ret.Get(0).(func(string, int) model.Task); ok {
		r0 = rf(name, status)
	} else {
		r0 = ret.Get(0).(model.Task)
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(name, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: id
func (_m *TaskRepository) DeleteTask(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTask provides a mock function with given fields:
func (_m *TaskRepository) GetAllTask() ([]model.Task, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTask")
	}

	var r0 []model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Task, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: ID, name, status
func (_m *TaskRepository) UpdateTask(ID int, name string, status int) (*model.Task, error) {
	ret := _m.Called(ID, name, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 *model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string, int) (*model.Task, error)); ok {
		return rf(ID, name, status)
	}
	if rf, ok := ret.Get(0).(func(int, string, int) *model.Task); ok {
		r0 = rf(ID, name, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string, int) error); ok {
		r1 = rf(ID, name, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
